pipeline {
    agent { label 'agent-linux' }

    environment {
        AZURE_CREDS = credentials('AZURE_CREDENTIALS')  // Azure credentials stored in Jenkins
    }

    parameters {
        string(name: 'VM_NAME', defaultValue: 'MyVM', description: 'Name of the VM')
        string(name: 'VM_SIZE', defaultValue: 'Standard_B1ms', description: 'Size of the VM')
        string(name: 'ADMIN_USERNAME', defaultValue: 'adminuser', description: 'Admin username for the VM')
        string(name: 'ADMIN_PASSWORD', defaultValue: '', description: 'Admin password for the VM')
        string(name: 'RESOURCE_GROUP', defaultValue: 'rg-admin-001', description: 'Resource Group Name')
        string(name: 'LOCATION', defaultValue: 'Central India', description: 'Location for the VM')
        string(name: 'VM_IMAGE', defaultValue: 'Canonical:ubuntu-24_04-lts:server:latest', description: 'VM Image in the format Publisher:Offer:Sku:Version')
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }
        stage('Set Environment Variables') {
            steps {
                script {
                    // Store parameters in environment variables
                    env.VM_NAME = "${params.VM_NAME}"
                    env.VM_SIZE = "${params.VM_SIZE}"
                    env.ADMIN_USERNAME = "${params.ADMIN_USERNAME}"
                    env.ADMIN_PASSWORD = "${params.ADMIN_PASSWORD}"
                    env.RESOURCE_GROUP = "${params.RESOURCE_GROUP}"
                    env.LOCATION = "${params.LOCATION}"
                    env.VM_IMAGE = "${params.VM_IMAGE}"
                }
            }
        }

        stage('Login to Azure') {
            steps {
                pwsh '''
                    # Set the Azure credentials environment variable
                    $env:AZURE_CREDS_JSON = $env:AZURE_CREDS

                    # Use absolute path to the script
                    $scriptPath = "${env.WORKSPACE}powershell_scripts/login.ps1"

                    # Check if the script exists
                    if (Test-Path $scriptPath) {
                        Write-Host "Found login.ps1 at: $scriptPath"
                        & $scriptPath
                    } else {
                        Write-Host "login.ps1 not found at: $scriptPath"
                        exit 1
                    }
                '''
            }
        }

        stage('Create VM') {
            steps {
                pwsh '''
                    # Access environment variables and ensure they are set
                    $vmName = $env:VM_NAME
                    $vmSize = $env:VM_SIZE
                    $adminUsername = $env:ADMIN_USERNAME
                    $adminPassword = $env:ADMIN_PASSWORD
                    $resourceGroupName = $env:RESOURCE_GROUP
                    $location = $env:LOCATION
                    $vmImage = $env:VM_IMAGE

                    # Check if all required parameters are not null or empty
                    if ([string]::IsNullOrEmpty($vmName) -or [string]::IsNullOrEmpty($vmSize) `
                        -or [string]::IsNullOrEmpty($adminUsername) -or [string]::IsNullOrEmpty($adminPassword) `
                        -or [string]::IsNullOrEmpty($resourceGroupName) -or [string]::IsNullOrEmpty($location) `
                        -or [string]::IsNullOrEmpty($vmImage)) {
                        Write-Host "Error: One or more parameters are missing"
                        exit 1
                    }

                    # Path to the PowerShell script for VM creation
                    $scriptPath = "${env.WORKSPACE}create-vm/create-vm.ps1"

                    # Check if the script exists
                    if (Test-Path $scriptPath) {
                        Write-Host "Found create-vm.ps1 at: $scriptPath"
                        # Pass the parameters to the script
                        & $scriptPath -vmName $vmName -vmSize $vmSize -adminUsername $adminUsername `
                            -adminPassword $adminPassword -resourceGroupName $resourceGroupName `
                            -location $location -vmImage $vmImage
                    } else {
                        Write-Host "create-vm.ps1 not found at: $scriptPath"
                        exit 1
                    }
                '''
            }
        }
    }
}
